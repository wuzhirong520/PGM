import numpy as np
from scipy.stats import spearmanr,kendalltau

datasets = ['MUV', 'BACE', 'BBBP', 'ClinTox', 'SIDER','ToxCast', 'HIV', 'PCBA', 'Tox21', 'FreeSolv', 'Lipophilicity', 'ESOL']

def printRankString(ranks):
    for i in range(len(datasets)):
        print([datasets[j] for j in ranks[i]])
    print("")

def get_finetune_ranks():
    ranks = []
    for i in range(len(datasets)):
        scores = []
        for j in range(len(datasets)):
            if j==i :
                scores.append(9999999.0)
                continue
            with open(f"./log/{datasets[i]}-from-{datasets[j]}-001/best_val_score.txt","r") as f:
                scores.append(float(f.read()))
        rank = list(np.array(scores).argsort())
        rank.reverse()
        ranks.append(rank)
    return ranks

def get_molecule_ranks():
    sims = [[999990.0, 0.12462606014594355, 0.11566875140963492, 0.10668096203344488, 0.10597707154404834, 0.09901114557112117, 0.11423365953017088, 0.13649573278662402, 0.09774699583503783, 0.0700319506601435, 0.1284080579442933, 0.08668308419433289],
            [0.12462606014594073, 999990.0, 0.11333427695840967, 0.10710789317954773, 0.10666955315230382, 0.0940397896008027, 0.10573547259419444, 0.12597626213096502, 0.0919437211231946, 0.06300170798322118, 0.1259512578691687, 0.07963160732887763], 
            [0.11566875140963456, 0.11333427695840624, 999990.0, 0.10145849042761601, 0.10102068042049925, 0.09303324439369545, 0.1018859390167364, 0.11491080416805291, 0.09161676591486996, 0.0676602990203496, 0.11207886232778785, 0.08199903783860883], 
            [0.10668096203344264, 0.10710789317954582, 0.1014584904276194, 999990.0, 0.09583312768826856, 0.08877172383778686, 0.09524047534947819, 0.10686955908368505, 0.08788989680385134, 0.06484109943661974, 0.10357634300773239, 0.07798343891306066], 
            [0.10597707154405597, 0.10666955315231229, 0.1010206804205022, 0.09583312768827806, 999990.0, 0.08690361271860426, 0.09403016172816012, 0.10620034882287667, 0.08590568149623908, 0.061593187761429295, 0.1040572737454621, 0.07478538844987426], 
            [0.09901114557112298, 0.0940397896008034, 0.09303324439369781, 0.08877172383779085, 0.08690361271860716, 999990.0, 0.089808889181329, 0.09897010886279686, 0.08758081630544085, 0.07227932365735398, 0.0942784278563336, 0.08075655984305748], 
            [0.1142336595301674, 0.10573547259419415, 0.10188593901673552, 0.09524047534947515, 0.09403016172815257, 0.08980888918132157, 999990.0, 0.1130534513636432, 0.08878423712160723, 0.06587142710059908, 0.10751894835820426, 0.0804695903022707], 
            [0.13649573278662985, 0.1259762621309668, 0.11491080416804811, 0.10686955908368762, 0.10620034882286716, 0.09897010886279692, 0.1130534513636416, 999990.0, 0.09782482466300652, 0.0694188159288599, 0.12778011177033635, 0.08586948650819959], 
            [0.09774699583504137, 0.09194372112319893, 0.09161676591487479, 0.08788989680385657, 0.0859056814962392, 0.0875808163054419, 0.08878423712160624, 0.09782482466300411, 999990.0, 0.07248844421174826, 0.09280856594506666, 0.0803883034061875], 
            [0.07003195066013902, 0.0630017079832232, 0.06766029902034931, 0.06484109943661996, 0.06159318776142934, 0.07227932365735358, 0.06587142710059968, 0.06941881592886313, 0.07248844421174969, 999990.0, 0.06518190661077537, 0.07676166787233439], 
            [0.1284080579442998, 0.12595125786917558, 0.11207886232778864, 0.10357634300774464, 0.10405727374545598, 0.09427842785633453, 0.10751894835821023, 0.12778011177033735, 0.09280856594506796, 0.06518190661077992, 999990.0, 0.0816838346872109], 
            [0.08668308419433053, 0.07963160732887324, 0.08199903783860259, 0.07798343891305745, 0.07478538844987077, 0.08075655984305208, 0.08046959030226727, 0.08586948650819792, 0.08038830340618641, 0.07676166787232824, 0.0816838346872033, 999990.0]]

    ranks = []
    for i in range(len(datasets)):
        rank = list(np.array(sims[i]).argsort())
        rank.reverse()
        ranks.append(rank)
    return ranks


PGM_ranks =[[0, 7, 5, 6, 8, 4, 10, 3, 1, 2, 11, 9],
            [1, 7, 0, 5, 6, 8, 4, 10, 3, 2, 11, 9], 
            [2, 7, 5, 0, 6, 8, 4, 10, 3, 1, 11, 9], 
            [3, 7, 0, 5, 6, 8, 4, 10, 1, 2, 11, 9], 
            [4, 7, 5, 0, 6, 8, 10, 3, 1, 2, 11, 9], 
            [5, 7, 0, 6, 8, 4, 10, 3, 1, 2, 11, 9], 
            [6, 7, 5, 0, 8, 4, 10, 3, 1, 2, 11, 9], 
            [7, 0, 5, 6, 8, 4, 10, 3, 1, 2, 11, 9], 
            [8, 7, 0, 5, 6, 4, 10, 3, 1, 2, 11, 9], 
            [9, 7, 0, 5, 8, 6, 4, 10, 3, 1, 2, 11], 
            [10, 7, 0, 5, 6, 8, 4, 3, 1, 2, 11, 9], 
            [11, 7, 0, 5, 6, 8, 4, 10, 3, 1, 2, 9]]

printRankString(PGM_ranks)

# finetune_ranks = get_finetune_ranks()
# printRankString(finetune_ranks)

molecule_ranks = get_molecule_ranks()
printRankString(molecule_ranks)

spearmanr_results = []
kendalltau_results = []

for i in range(12):

    expected_ranking = PGM_ranks[i]
    actual_ranking = molecule_ranks[i]

    # 值在 -1 和 1 之间，+1 表示完全一致的排序，-1 表示完全相反的排序，0表示没有关联。
    # p值表示相关性是否显著，通常如果p值小于0.05，可以认为相关性是显著的。
    rho, p1 = spearmanr(expected_ranking, actual_ranking)

    # print(f"Spearman等级相关系数: {rho}, p值: {p1}")

    tau, p2 = kendalltau(expected_ranking, actual_ranking)

    # print(f"Kendall Tau系数: {tau}, p值: {p2}")

    spearmanr_results.append(rho)
    kendalltau_results.append(tau)

print(spearmanr_results)
print(kendalltau_results)

spearmanr_avg, kendalltau_avg= 0.0,0.0
for i in range(12):
    spearmanr_avg+=spearmanr_results[i]
    kendalltau_avg+=kendalltau_results[i]
spearmanr_avg, kendalltau_avg = spearmanr_avg/12, kendalltau_avg/12
print("")
print(spearmanr_avg, kendalltau_avg)