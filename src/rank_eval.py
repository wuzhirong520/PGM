import numpy as np
from scipy.stats import spearmanr,kendalltau

datasets = ['MUV', 'BACE', 'BBBP', 'ClinTox', 'SIDER','ToxCast', 'HIV', 'PCBA', 'Tox21', 'FreeSolv', 'Lipophilicity', 'ESOL']
selected_datasets = [1,2,3,4,8,5,11,9,10]

def printRankString(ranks):
    for i in range(len(ranks)):
        print([datasets[j] for j in ranks[i]])
    print("")

def get_finetune_ranks():
    ranks = []
    for i in range(len(datasets)):
        if i not in selected_datasets:
            continue
        scores = []
        for j in range(len(datasets)):
            if j==i :
                scores.append(9999999.0)
                continue
            with open(f"./log/{datasets[i]}-from-{datasets[j]}-001/best_val_score.txt","r") as f:
                scores.append(float(f.read()))
        rank = list(np.array(scores).argsort())
        rank.reverse()
        ranks.append(rank)
    return ranks

def scores_to_ranks(scores):
    ranks = []
    for i in range(len(datasets)):
        rank = list(np.array(scores[i]).argsort())
        # rank.reverse()
        ranks.append(rank)
    return ranks

PGM_scores =   [[0.0, 1.7232850950676948, 2.24021656322293, 1.5452966908924282, 0.567035676795058, 0.03526793307173648, 0.32554140489082783, 0.024315959308296442, 0.3396617466933094, 9.953791741281748, 1.4250879758037627, 5.504459259100258], 
                [1.7232850950676948, 0.0, 2.854190533980727, 2.3187336046248674, 1.8128186638932675, 1.7233403923455626, 1.751066738506779, 1.723094319459051, 1.7555952945258468, 10.09291154332459, 2.2449619427789003, 5.754615995101631], 
                [2.24021656322293, 2.854190533980727, 0.0, 2.7210655389353633, 2.309759147465229, 2.240116009488702, 2.261977642774582, 2.2399582667276263, 2.2665728465653956, 10.192339541390538, 2.6403958327136934, 5.954598309472203],
                [1.5452966908924282, 2.3187336046248674, 2.7210655389353633, 0.0, 1.6454182332381606, 1.5454144158866256, 1.5786181029397994, 1.545167324366048, 1.5819650434423238, 10.071475990116596, 2.1026417380198836, 5.719633190892637], 
                [0.567035676795058, 1.8128186638932675, 2.309759147465229, 1.6454182332381606, 0.0, 0.5668698941008188, 0.652770177111961, 0.5664427953888662, 0.6597510946448892, 9.969827951863408, 1.5338575758505613, 5.53106889128685], 
                [0.03526793307173648, 1.7233403923455626, 2.240116009488702, 1.5454144158866256, 0.5668698941008188, 0.0, 0.3255320916650817, 0.027000351110473275, 0.3397367618163116, 9.953802218660712, 1.4251559332478791, 5.504461005330086], 
                [0.32554140489082783, 1.751066738506779, 2.261977642774582, 1.5786181029397994, 0.652770177111961, 0.3255320916650817, 0.0, 0.32446161640109494, 0.46810779167572036, 9.959253948181868, 1.4616329281125218, 5.5121141485869884], 
                [0.024315959308296442, 1.723094319459051, 2.2399582667276263, 1.545167324366048, 0.5664427953888662, 0.027000351110473275, 0.32446161640109494, 0.0, 0.3386395110283047, 9.953761473298073, 1.4248317165765911, 5.5044167675077915], 
                [0.3396617466933094, 1.7555952945258468, 2.2665728465653956, 1.5819650434423238, 0.6597510946448892, 0.3397367618163116, 0.46810779167572036, 0.3386395110283047, 0.0, 9.95845883153379, 1.4650181401520967, 5.514807999134064],
                [9.953791741281748, 10.09291154332459, 10.192339541390538, 10.071475990116596, 9.969827951863408, 9.953802218660712, 9.959253948181868, 9.953761473298073, 9.95845883153379, 0.0, 10.056322207674384, 11.395687470212579], 
                [1.4250879758037627, 2.2449619427789003, 2.6403958327136934, 2.1026417380198836, 1.5338575758505613, 1.4251559332478791, 1.4616329281125218, 1.4248317165765911, 1.4650181401520967, 10.056322207674384, 0.0, 5.693847197107971], 
                [5.504459259100258, 5.754615995101631, 5.954598309472203, 5.719633190892637, 5.53106889128685, 5.504461005330086, 5.5121141485869884, 5.5044167675077915, 5.514807999134064, 11.395687470212579, 5.693847197107971, 0.0]]

molecule_sims =[[999990.0, 0.12462606014594355, 0.11566875140963492, 0.10668096203344488, 0.10597707154404834, 0.09901114557112117, 0.11423365953017088, 0.13649573278662402, 0.09774699583503783, 0.0700319506601435, 0.1284080579442933, 0.08668308419433289],
                [0.12462606014594073, 999990.0, 0.11333427695840967, 0.10710789317954773, 0.10666955315230382, 0.0940397896008027, 0.10573547259419444, 0.12597626213096502, 0.0919437211231946, 0.06300170798322118, 0.1259512578691687, 0.07963160732887763], 
                [0.11566875140963456, 0.11333427695840624, 999990.0, 0.10145849042761601, 0.10102068042049925, 0.09303324439369545, 0.1018859390167364, 0.11491080416805291, 0.09161676591486996, 0.0676602990203496, 0.11207886232778785, 0.08199903783860883], 
                [0.10668096203344264, 0.10710789317954582, 0.1014584904276194, 999990.0, 0.09583312768826856, 0.08877172383778686, 0.09524047534947819, 0.10686955908368505, 0.08788989680385134, 0.06484109943661974, 0.10357634300773239, 0.07798343891306066], 
                [0.10597707154405597, 0.10666955315231229, 0.1010206804205022, 0.09583312768827806, 999990.0, 0.08690361271860426, 0.09403016172816012, 0.10620034882287667, 0.08590568149623908, 0.061593187761429295, 0.1040572737454621, 0.07478538844987426], 
                [0.09901114557112298, 0.0940397896008034, 0.09303324439369781, 0.08877172383779085, 0.08690361271860716, 999990.0, 0.089808889181329, 0.09897010886279686, 0.08758081630544085, 0.07227932365735398, 0.0942784278563336, 0.08075655984305748], 
                [0.1142336595301674, 0.10573547259419415, 0.10188593901673552, 0.09524047534947515, 0.09403016172815257, 0.08980888918132157, 999990.0, 0.1130534513636432, 0.08878423712160723, 0.06587142710059908, 0.10751894835820426, 0.0804695903022707], 
                [0.13649573278662985, 0.1259762621309668, 0.11491080416804811, 0.10686955908368762, 0.10620034882286716, 0.09897010886279692, 0.1130534513636416, 999990.0, 0.09782482466300652, 0.0694188159288599, 0.12778011177033635, 0.08586948650819959], 
                [0.09774699583504137, 0.09194372112319893, 0.09161676591487479, 0.08788989680385657, 0.0859056814962392, 0.0875808163054419, 0.08878423712160624, 0.09782482466300411, 999990.0, 0.07248844421174826, 0.09280856594506666, 0.0803883034061875], 
                [0.07003195066013902, 0.0630017079832232, 0.06766029902034931, 0.06484109943661996, 0.06159318776142934, 0.07227932365735358, 0.06587142710059968, 0.06941881592886313, 0.07248844421174969, 999990.0, 0.06518190661077537, 0.07676166787233439], 
                [0.1284080579442998, 0.12595125786917558, 0.11207886232778864, 0.10357634300774464, 0.10405727374545598, 0.09427842785633453, 0.10751894835821023, 0.12778011177033735, 0.09280856594506796, 0.06518190661077992, 999990.0, 0.0816838346872109], 
                [0.08668308419433053, 0.07963160732887324, 0.08199903783860259, 0.07798343891305745, 0.07478538844987077, 0.08075655984305208, 0.08046959030226727, 0.08586948650819792, 0.08038830340618641, 0.07676166787232824, 0.0816838346872033, 999990.0]]


print("PGM rank")
PGM_ranks = scores_to_ranks(PGM_scores)
PGM_ranks = list(np.array(PGM_ranks)[selected_datasets])
printRankString(PGM_ranks)

print("Finetune rank")
finetune_ranks = get_finetune_ranks()
printRankString(finetune_ranks)

print("Molecule rank")
molecule_ranks = scores_to_ranks(np.array(molecule_sims)*-1)
molecule_ranks = list(np.array(molecule_ranks)[selected_datasets])
printRankString(molecule_ranks)


def eval_rank(rank1, rank2, is_print=True):
    spearmanr_results = []
    kendalltau_results = []
    for i in range(len(rank1)):
        expected_ranking = rank1[i]
        actual_ranking = rank2[i]
        # 值在 -1 和 1 之间，+1 表示完全一致的排序，-1 表示完全相反的排序，0表示没有关联。
        # p值表示相关性是否显著，通常如果p值小于0.05，可以认为相关性是显著的。
        rho, p1 = spearmanr(expected_ranking, actual_ranking)
        # print(f"Spearman等级相关系数: {rho}, p值: {p1}")
        tau, p2 = kendalltau(expected_ranking, actual_ranking)
        # print(f"Kendall Tau系数: {tau}, p值: {p2}")
        spearmanr_results.append(rho)
        kendalltau_results.append(tau)
    if is_print:
        print(spearmanr_results)
        print(kendalltau_results)
    spearmanr_avg, kendalltau_avg= 0.0,0.0
    for i in range(len(rank1)):
        spearmanr_avg+=spearmanr_results[i]
        kendalltau_avg+=kendalltau_results[i]
    spearmanr_avg, kendalltau_avg = spearmanr_avg/len(rank1), kendalltau_avg/len(rank1)
    if is_print:
        print(f"Spearman等级相关系数:   {spearmanr_avg}")
        print(f"Kendall Tau等级相关系数:{kendalltau_avg}")
        print("")
    return spearmanr_avg, kendalltau_avg

print("PGM: ")
eval_rank(PGM_ranks, finetune_ranks)

print("Molecule: ")
eval_rank(molecule_ranks, finetune_ranks)

PGM_scores = np.array(PGM_scores)
molecule_scores = 1.0 / np.array(molecule_sims)

best_alpha = -1.0
best_score = -1.0
for i in range(2000):
    alpha = i/2000.0*2
    mix_scores = PGM_scores + molecule_scores*alpha
    mix_ranks = scores_to_ranks(mix_scores)
    mix_ranks = list(np.array(mix_ranks)[selected_datasets])
    spearmanr_avg, kendalltau_avg = eval_rank(mix_ranks, finetune_ranks,False)
    if spearmanr_avg > best_score:
        best_score = spearmanr_avg
        best_alpha = alpha
    
print(best_alpha,best_score)

print("Mix: ")
PGM_scores = np.array(PGM_scores)
molecule_scores = 1.0 / np.array(molecule_sims)
mix_scores = PGM_scores + molecule_scores*best_alpha
mix_ranks = scores_to_ranks(mix_scores)
mix_ranks = list(np.array(mix_ranks)[selected_datasets])
printRankString(mix_ranks)
eval_rank(mix_ranks, finetune_ranks)